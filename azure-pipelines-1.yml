trigger:
- main

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'e2d4e6c1-471f-435e-b659-fa2bbfa8af60'

  # Function app name
  functionAppName: 'pratice1235'

  # Environment name
  environmentName: 'pratice1235'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: SONARQUBE 
  displayName: SONARQUBE 
  jobs:  
  - job: Sonarqube
    displayName: Sonarqube
    steps:
    - script: |
          echo "SONARQUBE SLOT"

- stage: BUILD
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'


    - script: |
        npm install
        npm run build
      displayName: 'Prepare binaries'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop


- stage: TEST 
  displayName: TEST 
  jobs:  
  - job: Test
    displayName: Test
    steps:
    - script: |
         echo "TEST CASES"


- stage: Deploy
  displayName: Deploy stage
  dependsOn: Test
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'dev'
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Functions App Deploy: $(functionAppName)'
            inputs:
              azureSubscription: 'DevOps (899f8574-cccc-4d2a-af0d-b5caa6e72f89)'
              appType: functionAppLinux
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'